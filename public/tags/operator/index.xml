<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operator on Jazzsir&#39;s blog</title>
    <link>https://jazzsir.github.io/tags/operator/</link>
    <description>Recent content in Operator on Jazzsir&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright> © 2020 jazzsir&#39;s tech blog. Powered by [Hugo](https://github.com/gohugoio/hugo). Theme [Okayish Blog Hugo Theme](https://github.com/kongdivin/hugo-theme-okayish-blog#readme).</copyright>
    <lastBuildDate>Wed, 12 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jazzsir.github.io/tags/operator/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubebuilder and Operator-SDK Souce code 분석</title>
      <link>https://jazzsir.github.io/posts/kubebuilder-and-operator-sdk/</link>
      <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jazzsir.github.io/posts/kubebuilder-and-operator-sdk/</guid>
      <description>Kubernetes Operator/Controller 구현 방법 Kubernetes에서 Operator(또는 controller)를 구현 하려면 여러가지 방법이 있다.
 API Server의 REST API(watch)를 이용하여 shell script로 구현: 가장 간단한 방법이나 오류 처리나 고급 기능을 이용하는데 한계가 있다. client-go library를 직접 이용: workqueue 구현이나 client, informers, listers, deep-copy 등의 기능들을 개발자 영역에서 모두 구현해야 하지만, 이러한 코드들을 자동으로 생성해주는 방법이 있으므로 사실 그렇게 어렵지는 않다. operator-sdk 또는 kubebuilder와 같은 SDK를 이용하는 방법: controller나 operator를 개발할 때, 가장 많이 사용하고 있는 방법이다.</description>
    </item>
    
  </channel>
</rss>