<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jazzsir&#39;s blog</title>
    <link>https://jazzsir.github.io/posts/</link>
    <description>Recent content in Posts on Jazzsir&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright> © 2020 jazzsir&#39;s tech blog. Powered by [Hugo](https://github.com/gohugoio/hugo). Theme [Okayish Blog Hugo Theme](https://github.com/kongdivin/hugo-theme-okayish-blog#readme).</copyright>
    <lastBuildDate>Wed, 17 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jazzsir.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Improving Kubeflow kfctl_istio_dex.v1.0.2 manifest</title>
      <link>https://jazzsir.github.io/posts/improving-kubeflow-manifest/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jazzsir.github.io/posts/improving-kubeflow-manifest/</guid>
      <description>Kubeflow가 버전 1.0을 찍긴 했지만 아직은 부족한 부분이 좀(?) 있다. kfctl과 KFDef를 분석할 겸해서 kfctl_istio_dex.v1.0.2 기반으로 지금까지 customizing했던 부분들을 적용하여 kubeflow/manifests 를 개선해 보았다.
개선 항목  Pipeline 0.5.1 로 업그레이드 KFServing 0.3 으로 업그레이드 kfserving-ingressgateway 적용 (https://github.com/kubeflow/kfserving/issues/786 로 인한 Workaround) nodeafinity 적용(kubeflow 배포 철학과는 맞지 않지만&amp;hellip;.) Application CR 빠진 부분 추가 중복 지정 부분(namespace 등) 삭제 minio vitualservice 추가  Git repo - https://github.com/jazzsir/manifests/tree/v1.0.2-branch
설치 방법 설치 방법은 기존과 같다.</description>
    </item>
    
    <item>
      <title>Kubernetes Korea User Group Meet-up 발표자료(Cluster-API)</title>
      <link>https://jazzsir.github.io/posts/cluster-api-presentation-at-meetup/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jazzsir.github.io/posts/cluster-api-presentation-at-meetup/</guid>
      <description>Kubernetes Korea User Group Meet-up 발표자료  Bootstrapping a Kubernetes Cluster on Openstack with Cluster API  </description>
    </item>
    
    <item>
      <title>Cluster-API for Openstack(CAPO) Sequence diagram - v1alpha2</title>
      <link>https://jazzsir.github.io/posts/cluster-api-using-openstack-provider/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jazzsir.github.io/posts/cluster-api-using-openstack-provider/</guid>
      <description>Cluster-API for Openstack(CAPO) Sequence diagram - v1alpha2 </description>
    </item>
    
    <item>
      <title>SR-IOV and DPDK packet processing acceleration in kubernetes</title>
      <link>https://jazzsir.github.io/posts/sriov-and-dpdk-packet-processing-acceleration-in-kubernetes/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jazzsir.github.io/posts/sriov-and-dpdk-packet-processing-acceleration-in-kubernetes/</guid>
      <description>Fast data path를 위한 DPDK와 SR-IOV를 Container와 Kubernetes에 적용하는 방법을 알아보자
Container에 적용하기 오픈소스 CNI plug-ins을 이용하여 container내에서 fast data path networking을 가능하게 할 수 있다. 여기서는 두개의 SR-IOV interfaces와 SSH 원격 접속을 위한 하나의 Management interface를 적용한다.
DPDK 기반의 애플리케이션을 실행하기 위해
 SR-IOV VF가 enabled되어 있어야 하고 CNI plug-ins으로 Docker container에 노출 시켜야 하고 Hugepages가 host machine에 enabled되어야 한다.  일반적인 Linux distro가 지원하는 Hugepage sizes는 2MB와 1GB 이다.</description>
    </item>
    
    <item>
      <title>Kubebuilder and Operator-SDK Souce code 분석</title>
      <link>https://jazzsir.github.io/posts/kubebuilder-and-operator-sdk/</link>
      <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jazzsir.github.io/posts/kubebuilder-and-operator-sdk/</guid>
      <description>Kubernetes Operator/Controller 구현 방법 Kubernetes에서 Operator(또는 controller)를 구현 하려면 여러가지 방법이 있다.
 API Server의 REST API(watch)를 이용하여 shell script로 구현: 가장 간단한 방법이나 오류 처리나 고급 기능을 이용하는데 한계가 있다. client-go library를 직접 이용: workqueue 구현이나 client, informers, listers, deep-copy 등의 기능들을 개발자 영역에서 모두 구현해야 하지만, 이러한 코드들을 자동으로 생성해주는 방법이 있으므로 사실 그렇게 어렵지는 않다. operator-sdk 또는 kubebuilder와 같은 SDK를 이용하는 방법: controller나 operator를 개발할 때, 가장 많이 사용하고 있는 방법이다.</description>
    </item>
    
    <item>
      <title>Tuning kernel for kubernetes</title>
      <link>https://jazzsir.github.io/posts/tuning-kernel-for-kubernetes/</link>
      <pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jazzsir.github.io/posts/tuning-kernel-for-kubernetes/</guid>
      <description>Kubernetes의 Pod/container가 cgroup으로 isolation된다고 하더라도 host의 conntrack table을 공유할 수 밖에 없으므로 동시 접속자 수가 많고 짧은 응답시간이 요구되는 시스템의 경우 관련 파라미터들의 튜닝이 필요하다. 또한 성능을 위해서 ingress-controller를 hostNetwork로 설정하고 별도의 노드로 구성하였다면 다양한 커널 파라미터들을 튜닝하여 성능 개선을 할 수 있다.
Netfilter modules nf_conntrack /proc/sys/net/netfilter/nf_conntrack_max는 NAT/SNAT(또는 IP당 연결 갯수 제한을 위해) 연결을 tracking하는 table의 최대 연결 갯수를 정하는 값인데, Load test나 많은 연결을 요할때 병목이 될 수 있다.</description>
    </item>
    
    <item>
      <title>Machine learning</title>
      <link>https://jazzsir.github.io/posts/machine-learning/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jazzsir.github.io/posts/machine-learning/</guid>
      <description>머신러닝/딥러닝의 개념을 이해하기 위해 만든 자료이다. 홍콩과기대 김성훈 교수님의 모두를 위한 머신러닝과 딥러닝의 강의를 바탕으로 만들어졌고, Backpropagation 부분은 Andrew Ng교수님 강의 자료와 아래 링크를 참조하였다.
 Machine Learning — Andrew Ng, Stanford University CS231n Winter 2016: Lecture 4: Backpropagation, Neural Networks 1 https://mattmazur.com/2015/03/17/a-step-by-step-backpropagation-example/  Linear Regression 공부를 많이 할 수록 성적이 올라간다.
Hypothesis Hypothesis는 아래와 같이 1차 방정식이다.
H(x) = Wx + b 즉, 위의 그래프 처럼, Data points에서 가장 cost가 적은 Linear한 함수를 만들기 위해 W와 b를 찾아야 한다.</description>
    </item>
    
    <item>
      <title>Installing Kolla-kubernetes</title>
      <link>https://jazzsir.github.io/posts/installing-kolla-kubernetes/</link>
      <pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jazzsir.github.io/posts/installing-kolla-kubernetes/</guid>
      <description>kolla로 build된 Openstack components를 Kubernetes상에 전개하는 Kolla-kubernetes를 설치하는 방법을 정리하였다.
기존 소스에서 아래를 수정 하였다.
 All-in-one으로 설치되는 Charts를 Controller/Network/Compute node로 분할하여 Multi-node 로 설치되도록 Open vSwitch관련 Charts를 수정. Openstack Ocata(4.0.0)를 최신 release인 Pike(5.0.2)로 변경 적용. 안정적으로 구동될 수 있도록 기존의 많은 문제점들을 수정.  git clone {% highlight js %} git clone http://github.com/openstack/kolla-ansible git clone http://github.com/openstack/kolla-kubernetes {% endhighlight %}
configure files replace 4.0.0 with 5.0.2 뭐 tools, orchestration 은 안해도 될것 같지만&amp;hellip;.</description>
    </item>
    
    <item>
      <title>Using SR-IOV on OpenStack</title>
      <link>https://jazzsir.github.io/posts/using-sr-iov-on-openstack/</link>
      <pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jazzsir.github.io/posts/using-sr-iov-on-openstack/</guid>
      <description>BIOS 설정 Enable Intel VT-d in BIOS
네트워크 설정  SR-IOV 관련 인터페이스 ONBOOT를 yes로 설정  /etc/sysconfig/network-scripts/ifcfg-ens1f0 TYPE=Ethernet BOOTPROTO=none NAME=ens1f0 DEVICE=ens1f0 ONBOOT=yes NM_CONTROLLED=no USERCTL=no /etc/sysconfig/network-scripts/ifcfg-ens4f0 TYPE=Ethernet BOOTPROTO=none NAME=ens4f0 DEVICE=ens4f0 ONBOOT=yes NM_CONTROLLED=no USERCTL=no [root@overcloud-compute-3 network-scripts]# cat ifcfg-ens1f1 TYPE=Ethernet BOOTPROTO=none NAME=ens1f1 DEVICE=ens1f1 ONBOOT=yes NM_CONTROLLED=no USERCTL=no [root@overcloud-compute-3 network-scripts]# cat ifcfg-ens4f1 TYPE=Ethernet BOOTPROTO=none NAME=ens4f1 DEVICE=ens4f1 ONBOOT=yes NM_CONTROLLED=no USERCTL=no  Compute Node PCI Vendor/Product ID 조회  [root@overcloud-compute-3 ~]# ethtool -i ens1f1 driver: ixgbe version: 4.</description>
    </item>
    
  </channel>
</rss>